Chyba wszyscy kiedyś napisali kod taki jak ten:

let myArray = [1, 2, 3, 4, 5]
for (let i = 0; i < myArray.length; i++) {
  doSomething(myArray[i])
}

Dzisiaj chciałbym was przekonać, że jest to przykład źle napisanego kodu. Ale żeby zrozumieć dlaczego nie warto tak pisać, należy najpierw spojrzeć na to skąd wziął się taki sposób.

Początków takiej postaci pętli for należy doszukiwać się w języku C, którego składnia leży u podstawy JavaScriptu.

int myArray[] = { 1, 2, 3, 4, 5 };
for(int i = 0; i < sizeof(myArray) / sizeof(int); i++) {
  doSomething(myArray[i]);
}

Założeniem C było udostępnienie dostępu programiście do niskopoziomowego programowania z zachowaniem wysokopoziomowej składni. Efektem tego jest prosta możliwość przełożenia instrukcji języka C na asembler.

Jednak JavaScript jest znacznie bardziej wysokopoziomowym językiem niż C. Sama natura języka nie pozwala nam dokonywać optymalizacji na poziomie pojedynczych instrukcji procesora. Zanim kod JavaScriptowy zostanie wykonany musi zostać sparsowany, a w trakcie jego wykonania cyklicznie następuje wywołanie Garbage Collectora.

Te cechy języka kosztem mniejszej wydajności zapewniają nam możliwość wyrażenia swoich intencji w prosty i czytelny sposób.

Wróćmy więc do naszego początkowego przykładu.

let myArray = [1, 2, 3, 4, 5]
for (let i = 0; i < myArray.length; i++) {
  doSomething(myArray[i])
}

Podstawowym problemem tego kodu jest to że powinien robić jedną rzecz, ale robi dwie. Powinien zrobić coś z każdym elementem tablicy, ale jednocześnie zajmuje się kontrolowaniem pętli. Aby ten problem naprawić możemy zrobić refactoring i wydzielić kontrolowanie pętli do osobnej funkcji.

function forEach (array, action) {
  for (let i = 0; i < array.length; i++) {
    action(array[i])
  }
}

A następnie użyć jej do osiągnięcia naszego pierwotnego celu:

let myArray = [1, 2, 3, 4, 5]
forEach(myArray, doSomething)

W większości zastosowań nie ma jednak sensu duplikować istniejącej funkcjonalności. Możemy użyć wbudowanej metody forEach obiektów typu Array.

let myArray = [1, 2, 3, 4, 5]
myArray.forEach(doSomething)

Zauważmy, że w obu powyższych przypadkach przekazaliśmy funkcję jako argument. Jest to możliwe ponieważ JavaScript traktuje funkcje tak jak inne obiekty. Dzięki temu otwiera nam drogę do programowania w innym niż imperatywny paradygmacie. JavaScript pozwala nam pisać funkcyjny kod.

Dzięki podejściu funkcyjnemu możemy tworzyć pętle bez użycia słowa kluczowego for. Żeby zrozumieć jak to się dzieje musimy zrozumieć zjawisko rekurencji.

function fibonacci (n) {
  if (n == 0 || n == 1) {
    return n
  }
  return fibonacci(n - 1) + fibonacci(n - 2)
}

Ten klasyczny przykład pokazuje obliczanie kolejnych elementów ciągu Fibonacciego poprzez wywoływanie przez funkcję samej siebie z innymi argumentami. Nie skupiając się na problemach tej implementacji, przejdźmy do wykorzystania rekurencji do iteracji.

function forEach (array, action) {
  if(array.length > 0) {
    action(array[0])
    forEach(array.slice(1), action) // without the first element
  }
}

Wykorzystując destrukturyzację z ES2015 możemy to zapisać znacznie prościej:

function forEach ([first, ...rest], action) {
  if (first !== undefined) {
    action(first)
    forEach(rest, action)
  }
}

Zauważmy że wszystkie przedstawione implementacje forEach nie zakładają niczego o danych zawartych w tablicy ani o operacji którą chcemy na nich wykonać. Abstrakcja iteracji pozwala nam na czytelny zapis naszych intencji.

Czasem celem iteracji nie jest użycie elementów tablicy do wykonania jakiegoś zadania, a ich transformacja.

let myArray = [1, 2, 3, 4, 5]
for (let i = 0; i < myArray.length; i++) {
  myArray[i] = myArray[i] * 5
}

Ten kod ma ten sam problem co nasz początkowy przykład. Ma za dużo obowiązków. Na ratunek przychodzi funkcja map.

let myArray = [1, 2, 3, 4, 5]
myArray = myArray.map(x => x * 5)

Możemy jeszcze uprościć ten przykład

const myArray = [1, 2, 3, 4, 5].map(x => x * 5)

Wydawałoby się więc, że użycie prostych, wbudowanych konstrukcji języka takich jak forEach czy map rozwiązuje problem całkowicie. Czasem jednak napotykamy problemy nieco bardziej złożone niż te dostępne w metodach obiektów Array.

Powstały więc biblioteki, które zapewniają znacznie większy arsenał małych funkcji do manipulacji danymi. Dwie główne, prezentujące odmienne podejście do problemu biblioteki to:

Lodash oraz Ramda.

Korzystając z Lodasha zapisujemy nasze działania sekwencyjnie:

let myArray = [1, 2, 3, 4, 5]
myArray = _.map(myArray, x => x * 5)
_.forEach(myArray, doSomething)

Korzystając z Ramdy nasze działania to funkcje składające się z mniejszych funkcji:

const multiplyBy5AndDoSomething = R.compose(
  R.forEach(doSomething),
  R.map(x => x * 5)
)

let myArray = [1, 2, 3, 4, 5]
multiplyBy5AndDoSomething(myArray)

Oczywiście nic nie stoi na przeszkodzie aby korzystać z Lodasha w sposób funkcyjny a z Ramdy w sposób imperatywny.

Ale!

Co jeśli nie chcemy iterować po strukturach danych. Jeśli chcemy po prostu powtórzyć jakieś działania kilka razy? A może chemy iterować po ogromnych, bądź nieskończonych zbiorach?

W tym momencie zawodzą nas wcześniejsze podejścia (* funkcyjne nie jeśli mamy tail-call optimisation). Na szczęście JavaScript otrzymał w ES2015 specyfikację i implementację protokołu iteracji, który otwiera nowe możliwości.

Byłem kiedyś na prezentacji pokazującej najciekawsze rzeczy dodane w ES2015. Usłyszałem wtedy takie stwierdzenie:

"Oprócz wszystkiego, twórcy JavaScript dodali również generatory. Raczej niepotrzebnie, bo nie widzę dla nich żadnego zastosowania"

Nic bardziej mylnego. Zobaczmy co to takiego są te generatory, jak ich używać, jak je pisać i wreszcie co dobrego z nich wynika.

Rozpatrzmy jeszcze raz kod z początku prezentacji.

let myArray = [1, 2, 3, 4, 5]
for (let i = 0; i < myArray.length; i++) {
  doSomething(myArray[i])
}

Pokażę wam jeszcze jeden sposób zapisania tego samego:

let myArray = [1, 2, 3, 4, 5]
for (let item of myArray) {
  doSomething(item)
}

Może nie widać tego od razu ale ten kod unika pewnego problemu, którego tak bardzo chcieliśmy uniknąć wcześniej. Otórz nie zajmuje się on w ogóle konstrukcją pętli. Nie interesują go indeksy i inkrementacja. Jest tylko deklaracja "zrób coś dla każdego elementu tablicy". Ostatecznie osiągamy taki sam podział odpowiedzialności jak w przypadku innych rozwiązań: nasz kod mówi jedynie co chcemy zrobić, o to jak to osiągnąć dbają inne elementy (w tym przypadku konstrukcja for..of).

Warto wiedzieć, że for..of nie korzysta w ogóle z indeksów tablicy! Obiekty Array implementują protokół iteracji (iterable protocol). Oznacza to, że posiadają metodę @@iterator (Symbol.iterator), która zwraca iterator - obiekt pozwalający uzyskać dostęp do kolejnych elementów sekwencji.

Zobaczmy jak wykorzystać ten mechanizm "ręcznie", bez użycia for..of

let a = [1, 2, 3]
let iterator = a[Symbol.iterator]()
iterator.next() // {value: 1, done: false}
iterator.next() // {value: 2, done: false}
iterator.next() // {value: 3, done: false}
iterator.next() // {value: undefined, done: true}

Jak widzimy, nasz iterator zwraca obiekty posiadające wartość oraz flagę która mówi o tym, czy sekwencja się zakończyła. Zobaczmy w jaki sposób możemy stworzyć własny iterator.

Używając generatorów.

Generatory działają podobnie do zwykłych funkcji ale ich wykonanie może zostać przerwane. Aby tego dokonać używane jest słowo kluczowe yield.

function * generate123 () {
  yield 1
  yield 2
  yield 3
}

let iterator = generate123()
iterator.next() // {value: 1, done: false}
iterator.next() // {value: 2, done: false}
iterator.next() // {value: 3, done: false}
iterator.next() // {value: undefined, done: true}

Jak zapewne zauważyliście wynik działania naszego kodu jest identyczny jak w przypadku użycia tablicy. Napiszmy więc bardziej zaawansowany generator.

function * range (limit) {
  for (let i = 0; i < limit; i++) {
    yield i
  }
}

Nasz nowy generator tworzy iterator dla sekwencji liczb całkowitych ograniczonej argumentem.

for (let i of range(3)) {
  console.log(i) // prints: 0, 1, 2
}

W tym momencie możecie się zastanawiać po co tyle zachodu aby osiągnąć to samo co mogliśmy osiągnąć używając tablicy. Ale to wcale nie jest to samo. Nasza funkcja może pobierać dowolnie duży limit, a iterator będzie zajmował dokładnie tyle samo pamięci.

for (let i of range(Infinity)) {
  console.log(i) // prints: 0, 1, 2, 3, 4, ...
}

Na tym jednak nie kończą się niespodzianki. Używając generatorów możemy transformować dowolne sekwencje w inne. Najprostszym przykładem będzie funkcja map napisana z użyciem generatorów.

function * map (iterable, fn) {
  for (let item of iterable) {
    yield fn(item)
  }
}

Tym sposobem możemy uzyskać bardzo interesujące rezultaty. Załóżmy, że chcemy uzyskać sekwencję wszyskich potęg liczby 2. Oczywiście można to uzyskać w taki sposób:

function getPowers (count) {
  let powers = []
  for (let i = 0; i < count; i++) {
    powers.push(2 ** i)
  }
  return powers
}

Ale to rozwiązanie zakłada, że wiemy z góry ile elementów będzie nam potrzebne. Musimy też zaalokować na nie pamięć. Spójrzmy więc na implementację z użyciem napisanych przez nas prostych funkcji:

const powersIterator = map(range(Infinity), x => 2 ** x)
for (let power of powersIterator) {
  console.log(power) // prints: 1, 2, 4, 8, 16, ...
}

W tym momencie widzimy już, że zbudowaliśmy narzędzie, którego nie zapewniają nam biblioteki takie jak Lodash czy Ramda. Ale do szczęścia brakuje nam możliwości wielokrotnego użycia.

const rangeIterator = range(3)

for (let i of rangeIterator) {
  console.log(i) // prints: 0, 1, 2
}

for (let i of rangeIterator) {
  console.log(i) // never executed
}

Dzieje się tak ponieważ iteratory są obiektami jednorazowego użytku. Pozwalają tylko na jednorazowe przejście po sekwencji elementów. Wiemy jednak, że po tablicy możemy iterować wielokrotnie. Nie jest ona iteratorem a obiektem, który implementuje protokół iteracji (ang. iterable).

Funkcja range, podejście drugie:

function range (limit) {
  let iterable = {}
  iterable[Symbol.iterator] = function * () {
    for (let i = 0; i < limit; i++) {
      yield i
    }
  }
  return iterable
}

Możemy to uprościć w zapisie:

function range (limit) {
  return {
    *[Symbol.iterator] () {
      for (let i = 0; i < limit; i++) {
        yield i
      }
    }
  }
}

Spróbujmy wykorzystać naszą funkcję teraz:

const rangeIterable = range(3)

for (let i of rangeIterable) {
  console.log(i) // prints: 0, 1, 2
}

for (let i of rangeIterable) {
  console.log(i) // prints: 0, 1, 2
}

Sukces! Udało się, pozostało tylko usiąść do własnych projektów i zaimplementować takie proste i użyteczne funkcje na generatorach.

Albo dołączyć zestaw takich funkcji z istniejącej biblioteki. W wolnym czasie napisałem właśnie taką prostą bibliotekę, która usprawnia pracę z iteratorami.

https://github.com/sz-piotr/iterable-sequence

Oprócz omówionych podczas tej prezentacji funkcji takich jak range, forEach, map zawiera ona znany z pythona zip jak również uznawane za podstawę programowania funkcyjnego w JavaScript filter, reduce i wiele innych.

Na koniec spójrzmy na przykład korzystania z tej biblioteki, odpowiadający tym, które dzisiaj omówiliśmy.

import { range } from 'iterable-sequence'

let powers = range(Infinity).map(x => 2 ** x)

for (let power of powers.take(5)) {
  console.log(power) // prints: 1, 2, 4, 8, 16
}

Bardzo dziękuję za uwagę i czekam na pytania.
